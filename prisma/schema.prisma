generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  OPEN
  CLOSED
  UNKNOWN
}

enum ApplicationStatus {
  APPLIED
  NOT_APPLIED
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role          @default(USER)
  accounts      Account[]
  applications  Application[]
  comments      Comment[] // Relation to comments
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Internship {
  id              String        @id @default(cuid())
  companyName     String
  position        String?
  location        String
  applicationLink String?
  deadline        DateTime?
  description     String?
  requirements    String?
  resourceUrl     String?
  companyWebsite  String?
  contactEmails   String[]
  status          Status        @default(OPEN)
  createdBy       String // Admin who created this
  
  applications    Application[]
  comments        Comment[] // Relation to comments
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Application {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  status ApplicationStatus @default(NOT_APPLIED)
  userId       String // For authentication
  User         User        @relation(fields: [userId], references: [id])
  Internship   Internship? @relation(fields: [internshipId], references: [id])
  internshipId String?
  @@index([userId])
  @@index([status])
}

model Comment {
  id           String     @id @default(cuid())
  content      String     @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  internshipId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  internship   Internship @relation(fields: [internshipId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([internshipId])
}
